#include<stdio.h>

#define MAX_PROCESS 10

// Function to perform Round Robin Scheduling
void roundRobinScheduling(int n, int arrivalTime[], int burstTime[], int timeQuantum) {
    int waitTime = 0, turnaroundTime = 0, tempBurstTime[MAX_PROCESS];
    int x = n;

    // Copy burst times to a temporary array
    for (int i = 0; i < n; i++) {
        tempBurstTime[i] = burstTime[i];
    }

    int total = 0, counter = 0, i = 0;

    // Print table header
    printf("Process ID       Burst Time       Turnaround Time      Waiting Time\n");

    // Round Robin Scheduling Algorithm
    for (total = 0, i = 0; x != 0;) {
        if (tempBurstTime[i] <= timeQuantum && tempBurstTime[i] > 0) {
            // Execute the process for the specified time quantum
            total = total + tempBurstTime[i];
            tempBurstTime[i] = 0;
            counter = 1;
        } else if (tempBurstTime[i] > 0) {
            // Execute the process for the entire remaining burst time
            tempBurstTime[i] = tempBurstTime[i] - timeQuantum;
            total += timeQuantum;
        }

        if (tempBurstTime[i] == 0 && counter == 1) {
            // Process is completed
            x--;
            printf("\nProcess No %d  \t\t %d\t\t\t\t %d\t\t\t %d", i + 1, burstTime[i],
                   total - arrivalTime[i], total - arrivalTime[i] - burstTime[i]);
            waitTime = waitTime + total - arrivalTime[i] - burstTime[i];
            turnaroundTime += total - arrivalTime[i];
            counter = 0;
        }

        // Update process index
        if (i == n - 1) {
            i = 0;
        } else if (arrivalTime[i + 1] <= total) {
            i++;
        } else {
            i = 0;
        }
    }

    // Calculate and print average waiting time and average turnaround time
    float averageWaitTime = waitTime * 1.0 / n;
    float averageTurnaroundTime = turnaroundTime * 1.0 / n;

    printf("\nAverage Waiting Time: %f", averageWaitTime);
    printf("\nAverage Turnaround Time: %f\n", averageTurnaroundTime);
}

// Main function
int main() {
    int n, timeQuantum;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int arrivalTime[MAX_PROCESS];
    int burstTime[MAX_PROCESS];

    // Input details of each process
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &arrivalTime[i]);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &burstTime[i]);
    }

    // Input time quantum
    printf("Enter time quantum: ");
    scanf("%d", &timeQuantum);

    // Perform Round Robin Scheduling
    roundRobinScheduling(n, arrivalTime, burstTime, timeQuantum);

    return 0;
}