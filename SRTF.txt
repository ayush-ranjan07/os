#include <stdio.h>

void srtf(int n, int arrivalTime[], int burstTime[]) {
    int completionTime[n];
    int turnaroundTime[n];
    int waitingTime[n];
    int remainingTime[n];

    for (int i = 0; i < n; i++) {
        remainingTime[i] = burstTime[i];
    }

    int currentTime = 0;
    int completedProcesses = 0;

    // SRTF Scheduling
    while (completedProcesses < n) {
        int shortest = -1; // Index of the shortest job

        // Find the process with the shortest remaining burst time and has arrived
        for (int i = 0; i < n; i++) {
            if (arrivalTime[i] <= currentTime && remainingTime[i] > 0) {
                if (shortest == -1 || remainingTime[i] < remainingTime[shortest]) {
                    shortest = i;
                }
            }
        }

        // If no valid process is found, move to the next arrival time
        if (shortest == -1) {
            currentTime++;
        } else {
            // Execute the shortest job
            remainingTime[shortest]--;
            currentTime++;

            // If the process is completed
            if (remainingTime[shortest] == 0) {
                completionTime[shortest] = currentTime;
                turnaroundTime[shortest] = completionTime[shortest] - arrivalTime[shortest];
                waitingTime[shortest] = turnaroundTime[shortest] - burstTime[shortest];

                completedProcesses++;
            }
        }
    }

    // Display process details and scheduling results for SRTF
    printf("\nPreemptive SRTF Scheduling:\n");
    printf("Process\t Arrival Time\t Burst Time\t Completion Time\t Turnaround Time\t Waiting Time\n");
    float avgTurnaroundTime = 0, avgWaitingTime = 0;
    for (int i = 0; i < n; i++) {
        printf("%d\t\t %d\t\t %d\t\t %d\t\t %d\t\t %d\n", i + 1, arrivalTime[i], burstTime[i],
               completionTime[i], turnaroundTime[i], waitingTime[i]);
        avgTurnaroundTime += turnaroundTime[i];
        avgWaitingTime += waitingTime[i];
    }

    avgTurnaroundTime /= n;
    avgWaitingTime /= n;

    printf("\nAverage Turnaround Time: %.2f", avgTurnaroundTime);
    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int arrivalTime[n];
    int burstTime[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &arrivalTime[i]);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &burstTime[i]);
    }

    // Perform SRTF scheduling
    srtf(n, arrivalTime, burstTime);

    return 0;
}